1. Entendendo o fluxo básico de versionamento (via Git)
# Verifica o status das alterações
git status

# Adiciona os arquivos alterados
git add .

# Cria um commit com uma mensagem descritiva
git commit -m "Descrição da mudança"

# Envia (faz push) para o GitHub
git push

Esse é o versionamento por commit: cada alteração que você salva com 
git commit é uma nova versão interna do seu projeto.

2. Usando tags para marcar versões (ex: v1.0, v1.1.0)
# Cria uma tag chamada v1.0
git tag v1.0

# Envia a tag para o GitHub
git push origin v1.0

Para criar uma tag com anotação (comentário):

git tag -a v1.0 -m "Primeira versão estável"
git push origin v1.0

No GitHub, essas tags aparecem em "Releases", e você pode até 
baixar .zip dessas versões.

3. Trabalhar com branches (opcional para versionamento paralelo)
Branches permitem trabalhar em versões diferentes do projeto ao mesmo tempo.

# Cria uma nova branch chamada "nova-funcionalidade"
git checkout -b nova-funcionalidade

# (faça suas alterações aqui...)

# Commita e envia
git add .
git commit -m "Nova funcionalidade implementada"
git push origin nova-funcionalidade

4. Visualizar o histórico de versões

Para ver o histórico:

git log

Ou de forma reduzida

git log --oneline


5. Ver no GitHub
No site GitHub:

Vá até seu repositório (PI_2)
Clique em "Commits" para ver o histórico
Clique em "Releases" para ver as tags (versões)
Clique em "Branches" para ver os ramos

6. Se você não quer subir alguns arquivos ou pastas para o repositório Git, 
a forma correta de fazer isso é usando o arquivo .gitignore.

Na raiz do seu projeto (PI_2), crie um arquivo chamado .gitignore se ele 
ainda não existir:

touch .gitignore

Ou abra ele diretamente no VS Code:
code .gitignore
No .gitignore, adicione o nome do arquivo um por linha ex:
# Ignorar arquivos específicos
segredo.txt
senha.env

# Ignorar diretórios inteiros
venv/
__pycache__/
node_modules/
.env/

# Ignorar todos os arquivos .log
*.log

7. Se já estiverem no Git, é preciso removê-los antes
Se você já comitou os arquivos que deseja ignorar, o .gitignore 
não vai funcionar até removê-los do controle do Git:

git rm --cached nome_do_arquivo

depois:

git commit -m "Remover arquivos do controle e adicionar ao .gitignore"
git push

8. Conferir se o Git está ignorando corretamente
Use este comando para verificar se um arquivo está sendo ignorado:

git check-ignore -v nome_do_arquivo

9. Para atualizar seu projeto local com as últimas alterações do repositório 
remoto, você usa o git pull.
Aqui está o passo a passo básico:

Abra o terminal e vá até a pasta do seu projeto:

cd /caminho/do/seu/projeto


Verifique em qual branch você está:

git branch


(O nome com * é a branch atual, geralmente main ou master.)

Puxe as alterações do repositório remoto:

git pull origin main

(ou substitua main pelo nome da branch que você está usando)

Algumas situações que podem acontecer:

Se você não tem modificações locais → o pull apenas baixa e aplica as mudanças.

Se você tem alterações locais não commitadas → pode dar conflito. Nesse caso, 
ou você faz git stash antes, ou commita suas mudanças e depois dá o pull.

Se der conflito → o Git vai pedir para você resolver manualmente os arquivos 
conflitantes antes de continuar.